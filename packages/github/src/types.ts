import { RestEndpointMethodTypes } from '@octokit/rest';

// the result for getContentByPath
export type FileOrDir = {
  name: string;
};

/**
 * One of "STRING", "STRING_ARRAY", "NUMBER" or "BOOL".
 *
 * | type         | Default UI Component |
 * | ------------ | -------------------- |
 * | STRING       | Input                |
 * | STRING_ARRAY | Select mode="tags"   |
 * | NUMBER       | InputNumber          |
 * | BOOL         | Switch               |
 *
 * `{"type": "STRING_ARRAY"}` is the same as `{"type": "STRING_ARRAY","type:createUpdatePage":"Select"}`
 */
export type DbColumnType = 'STRING' | 'STRING_ARRAY' | 'NUMBER' | 'BOOL';

export interface DbColumn {
  /**
   * Required. The id of this column.
   */
  id: string;
  /**
   * Required. The name of this column.
   */
  name: string;
  /**
   * Required. The type of this column.
   */
  type: DbColumnType;
  /**
   * Only one column in table should have this field.
   * `true` to indicate this column is an uniq key of this table.
   */
  primary?: boolean;
  /**
   * Description of the column
   */
  description?: string;
  /**
   * The value in this column is a reference to another table.
   * For example
   *
   * `users` table:
   * | id | name | role_code |
   * | -- | ---- | --------- |
   * | 1  | John | ADMIN     |
   *
   * `roles` table:
   * | code   | name |
   * | ------ | ---- |
   * | ADMIN  | Administrator |
   *
   * `users.role_code` is a reference to `roles.code`.
   * So the column definition of `users.role_code` is:
   * ```json
   * {
   *   "id": "role_code",
   *   "name": "Role",
   *   "referenceTable": "roles"
   * }
   */
  referenceTable?: string;
}

export interface DbTable {
  /**
   * The name of the table.
   */
  name: string;
  description?: string;
  /**
   * The columns of the table.
   * Array of column definition
   */
  columns: DbColumn[];
  /**
   * If true, the table is large, e.g. `users` table.
   * Optional, default is false. Set to true for large table file which is more than 1MB.
   * when single table file is more than 1MB, need to call blob api to get the content, otherwise will get 403 error
   */
  large?: boolean;
}

/**
 * View is a virtual table which is generated by a function.
 * Using view can query data from multiple tables.
 */
export interface DbView {
  /**
   * The name of the view.
   */
  name: string;
  description?: string;
  /**
   * The function to generate the view.
   * For example:
   * ```json
   * { "query": "return tablesRows['iam/roles'];" }
   * ```
   */
  query: string;
}

// the structure defined in dbcfg.json
export type DatabaseSchema = {
  name: string;
  description: string;
  tables: DbTable[];
  views?: DbView[];
};

/**
 * The database object.
 * For example, the following is a database object with two tables: users and posts.
 * ```json
 * {
 *   "users": [{
 *     "id": "id",
 *     "name": "name",
 *     "primary": true,
 *     "type": "STRING"
 *   }],
 *  "posts": [...]
 * }
 */
export type DatabaseMap = Record<string, DatabaseSchema>;

type TableRow = Record<string, any>;

type DbsCfgType = {
  repoPath?: string;
  dbModes: string; // one of 'normal' or 'split-table'
};

// raw response from @octokit/rest API
export interface RawFileContentAndSha {
  name: string; // file name
  content?: string; // file content in base64 format
  sha: string;
}

export interface FileContentAndSha {
  content: TableRow[];
  sha: string;
}

export interface DbsCfgContentAndShaType {
  content: DbsCfgType;
  sha: string;
}

export type UpdateFileType = {
  path: string;
  content: any;
  sha: RestEndpointMethodTypes['repos']['createOrUpdateFileContents']['parameters']['sha'];
  message?: string;
};

export type DeleteFileType = {
  path: string;
  sha: RestEndpointMethodTypes['repos']['deleteFile']['parameters']['sha'];
  message: string;
};
